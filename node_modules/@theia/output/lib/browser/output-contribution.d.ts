/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import URI from '@theia/core/lib/common/uri';
import { Widget } from '@theia/core/lib/browser/widgets/widget';
import { MaybePromise } from '@theia/core/lib/common/types';
import { OpenHandler, OpenerOptions } from '@theia/core/lib/browser';
import { Command, CommandRegistry, MenuModelRegistry } from '@theia/core/lib/common';
import { AbstractViewContribution } from '@theia/core/lib/browser/shell/view-contribution';
import { OutputWidget } from './output-widget';
import { ClipboardService } from '@theia/core/lib/browser/clipboard-service';
export declare namespace OutputCommands {
    const APPEND: Command;
    const APPEND_LINE: Command;
    const CLEAR: Command;
    const SHOW: Command;
    const HIDE: Command;
    const DISPOSE: Command;
    const CLEAR__WIDGET: Command;
    const LOCK__WIDGET: Command;
    const UNLOCK__WIDGET: Command;
    const CLEAR__QUICK_PICK: Command;
    const SHOW__QUICK_PICK: Command;
    const HIDE__QUICK_PICK: Command;
    const DISPOSE__QUICK_PICK: Command;
    const COPY_ALL: Command;
}
export declare class OutputContribution extends AbstractViewContribution<OutputWidget> implements OpenHandler {
    protected readonly clipboardService: ClipboardService;
    readonly id: string;
    constructor();
    registerCommands(registry: CommandRegistry): void;
    registerMenus(registry: MenuModelRegistry): void;
    canHandle(uri: URI): MaybePromise<number>;
    open(uri: URI, options?: OpenerOptions): Promise<OutputWidget>;
    protected withWidget(widget?: Widget | undefined, predicate?: (output: OutputWidget) => boolean): boolean | false;
}
//# sourceMappingURL=output-contribution.d.ts.map