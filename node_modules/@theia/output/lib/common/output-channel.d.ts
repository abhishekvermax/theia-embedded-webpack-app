/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="@theia/monaco-editor-core/monaco" />
import URI from '@theia/core/lib/common/uri';
import { Deferred } from '@theia/core/lib/common/promise-util';
import { Resource, ResourceResolver } from '@theia/core/lib/common/resource';
import { CommandRegistry, CommandContribution } from '@theia/core/lib/common/command';
import { OpenerService, QuickPickService } from '@theia/core/lib/browser';
import { Emitter, Event, Disposable, DisposableCollection } from '@theia/core';
import { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';
import { MonacoTextModelService, IReference } from '@theia/monaco/lib/browser/monaco-text-model-service';
import { OutputResource } from '../browser/output-resource';
import { OutputPreferences } from './output-preferences';
export declare class OutputChannelManager implements CommandContribution, Disposable, ResourceResolver {
    protected readonly openerService: OpenerService;
    protected readonly quickPickService: QuickPickService;
    protected readonly textModelService: MonacoTextModelService;
    protected readonly preferences: OutputPreferences;
    protected readonly channels: Map<string, OutputChannel>;
    protected readonly resources: Map<string, OutputResource>;
    protected _selectedChannel: OutputChannel | undefined;
    protected readonly channelAddedEmitter: Emitter<{
        name: string;
    }>;
    protected readonly channelDeletedEmitter: Emitter<{
        name: string;
    }>;
    protected readonly channelWasShownEmitter: Emitter<{
        name: string;
    }>;
    protected readonly channelWasHiddenEmitter: Emitter<{
        name: string;
    }>;
    protected readonly selectedChannelChangedEmitter: Emitter<{
        name: string;
    } | undefined>;
    readonly onChannelAdded: Event<{
        name: string;
    }>;
    readonly onChannelDeleted: Event<{
        name: string;
    }>;
    readonly onChannelWasShown: Event<{
        name: string;
    }>;
    readonly onChannelWasHidden: Event<{
        name: string;
    }>;
    readonly onSelectedChannelChanged: Event<{
        name: string;
    } | undefined>;
    protected readonly toDispose: DisposableCollection;
    protected readonly toDisposeOnChannelDeletion: Map<string, Disposable>;
    registerCommands(registry: CommandRegistry): void;
    protected pick({ channels, placeholder }: {
        channels: OutputChannel[];
        placeholder: string;
    }): Promise<OutputChannel | undefined>;
    getChannel(name: string): OutputChannel;
    protected registerListeners(channel: OutputChannel): Disposable;
    deleteChannel(name: string): void;
    getChannels(): OutputChannel[];
    getVisibleChannels(): OutputChannel[];
    protected get channelComparator(): (left: OutputChannel, right: OutputChannel) => number;
    dispose(): void;
    get selectedChannel(): OutputChannel | undefined;
    set selectedChannel(channel: OutputChannel | undefined);
    /**
     * Non-API: do not call directly.
     */
    resolve(uri: URI): Promise<Resource>;
    protected createResource({ uri, editorModelRef }: {
        uri: URI;
        editorModelRef: Deferred<IReference<MonacoEditorModel>>;
    }): OutputResource;
}
export declare enum OutputChannelSeverity {
    Error = 1,
    Warning = 2,
    Info = 3
}
export declare class OutputChannel implements Disposable {
    protected readonly resource: OutputResource;
    protected readonly preferences: OutputPreferences;
    private readonly contentChangeEmitter;
    private readonly visibilityChangeEmitter;
    private readonly disposedEmitter;
    private readonly toDispose;
    private disposed;
    private visible;
    private _maxLineNumber;
    private decorationIds;
    private textModifyQueue;
    readonly onVisibilityChange: Event<{
        isVisible: boolean;
    }>;
    readonly onContentChange: Event<void>;
    readonly onDisposed: Event<void>;
    constructor(resource: OutputResource, preferences: OutputPreferences);
    get name(): string;
    get uri(): URI;
    hide(): void;
    show(): void;
    /**
     * @deprecated use `show` and `hide` instead.
     *
     * TODO: decide on deprecation. I would be OK with a `setVisible(boolean)` signature, but not "visibility". So it would be a breaking anyway.
     * Also, `hide`/`show` is in sync with VS Code API. Thoughts?
     */
    setVisibility(visible: boolean): void;
    /**
     * Note: if `false` it does not meant it is disposed or not available, it is only hidden from the UI.
     */
    get isVisible(): boolean;
    clear(): void;
    dispose(): void;
    append(content: string, severity?: OutputChannelSeverity): void;
    appendLine(content: string, severity?: OutputChannelSeverity): void;
    protected doAppend({ content, severity, appendEol }: {
        content: string;
        severity: OutputChannelSeverity;
        appendEol?: boolean;
    }): Promise<void>;
    protected ensureMaxChannelHistory(textModel: monaco.editor.ITextModel): void;
    protected get maxLineNumber(): number;
    protected set maxLineNumber(maxLineNumber: number);
}
//# sourceMappingURL=output-channel.d.ts.map