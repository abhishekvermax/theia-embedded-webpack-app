"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowImpl = void 0;
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var services_1 = require("monaco-languageclient/lib/services");
var WindowImpl = /** @class */ (function () {
    function WindowImpl() {
    }
    WindowImpl_1 = WindowImpl;
    WindowImpl.prototype.showMessage = function (type, message) {
        var _a, _b, _c, _d;
        var actions = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            actions[_i - 2] = arguments[_i];
        }
        var originalActions = new Map((actions || []).map(function (action) { return [action.title, action]; }));
        var actionTitles = (actions || []).map(function (action) { return action.title; });
        var mapActionType = function (result) {
            if (!!result) {
                return originalActions.get(result);
            }
            return undefined;
        };
        if (type === services_1.MessageType.Error) {
            return (_a = this.messageService).error.apply(_a, __spread([message], actionTitles)).then(mapActionType);
        }
        if (type === services_1.MessageType.Warning) {
            return (_b = this.messageService).warn.apply(_b, __spread([message], actionTitles)).then(mapActionType);
        }
        if (type === services_1.MessageType.Info) {
            return (_c = this.messageService).info.apply(_c, __spread([message], actionTitles)).then(mapActionType);
        }
        if (type === services_1.MessageType.Log) {
            return (_d = this.messageService).log.apply(_d, __spread([message], actionTitles)).then(mapActionType);
        }
        return Promise.resolve(undefined);
    };
    WindowImpl.prototype.createOutputChannel = function (name) {
        var _this = this;
        // Note: alternatively, we could add `@theia/output` as a `devDependency` and check, for instance,
        // the manager for the output channels can be injected or not with `@optional()` but this approach has the same effect.
        // The `@theia/languages` extension will be removed anyway: https://github.com/eclipse-theia/theia/issues/7100
        if (this.canAccessOutput === undefined) {
            this.canAccessOutput = !!this.commandRegistry.getCommand('output:append');
        }
        if (!this.canAccessOutput) {
            return WindowImpl_1.NOOP_CHANNEL;
        }
        return {
            append: function (text) { return _this.commandRegistry.executeCommand('output:append', { name: name, text: text }); },
            appendLine: function (text) { return _this.commandRegistry.executeCommand('output:appendLine', { name: name, text: text }); },
            dispose: function () { return _this.commandRegistry.executeCommand('output:dispose', { name: name }); },
            show: function (preserveFocus) {
                if (preserveFocus === void 0) { preserveFocus = false; }
                return _this.commandRegistry.executeCommand('output:show', { name: name, options: { preserveFocus: preserveFocus } });
            }
        };
    };
    var WindowImpl_1;
    WindowImpl.NOOP_CHANNEL = {
        append: function () { },
        appendLine: function () { },
        dispose: function () { },
        show: function () { }
    };
    __decorate([
        inversify_1.inject(common_1.MessageService),
        __metadata("design:type", common_1.MessageService)
    ], WindowImpl.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(common_1.CommandRegistry),
        __metadata("design:type", common_1.CommandRegistry)
    ], WindowImpl.prototype, "commandRegistry", void 0);
    WindowImpl = WindowImpl_1 = __decorate([
        inversify_1.injectable()
    ], WindowImpl);
    return WindowImpl;
}());
exports.WindowImpl = WindowImpl;
//# sourceMappingURL=window-impl.js.map